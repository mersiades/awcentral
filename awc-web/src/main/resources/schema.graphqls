enum Roles {
    MC
    PLAYER
}

enum Stats {
    COOL
    HARD
    HOT
    SHARP
    WEIRD
    HX
}

enum MoveKinds {
    CHARACTER
    BASIC
    PERIPHERAL
    BATTLE
    ROAD_WAR
}

enum PlayBooks {
    ANGEL
    BATTLEBABE
    BRAINER
    CHOPPER
    DRIVER
    GUNLUGGER
    HARDHOLDER
    HOCUS
    MAESTRO_D
    SAVVYHEAD
    SKINNER
}

enum Threats {
    WARLORD,
    GROTESQUE,
    BRUTE,
    AFFLICTION,
    LANDSCAPE,
    TERRAIN,
    VEHICLE,
}

enum LookCategories {
    GENDER,
    CLOTHES,
    FACE,
    EYES,
    BODY
}

enum UniqueType {
    ANGEL_KIT,
    CUSTOM_WEAPONS,
    BRAINER_GEAR,
    GANG,
    CAR,
    WEAPONS,
    HOLDING,
    FOLLOWERS,
    ESTABLISHMENT,
    WORKSPACE,
    SKINNER_GEAR
}

type User {
    id: ID!
    displayName: String
    email: String
    gameRoles: [GameRole]
}

type Game {
    id: ID!
    name: String!
    mc: User
    commsApp: String
    commsUrl: String
    players: [User]
    gameRoles: [GameRole]
    invitees: [String]
}

type Npc {
    id: ID
    name: String
    description: String
}

type Threat {
    id: ID
    name: String
    threatKind: Threats
    impulse: String
    description: String
    stakes: String
}

type CharacterStat {
    id: ID
    stat: Stats
    value: Int
    isHighlighted: Boolean
}

type StatsBlock {
    id: ID
    stats: [CharacterStat]
}

type Character {
    id: ID!
    name: String
    gear: [String]
    playbook: PlayBooks
    looks: [Look]
    statsBlock: StatsBlock
    playbookUnique: PlaybookUnique
}

type GameRole {
    id: ID!
    role: Roles
    game: Game
    npcs: [Npc]
    threats: [Threat]
    characters: [Character]
}

type Move {
    id: ID
    name: String!
    description: String
    stat: Stats
    kind: MoveKinds!
    playbook: PlayBooks
}

type Playbook {
    id: ID
    playbookType: PlayBooks!
    barterInstructions: String!
    intro: String!
    introComment: String!
    playbookImageUrl: String!
}

type Name {
    id: ID
    playbookType: PlayBooks
    name: String
}

type Look {
    id: ID
    playbookType: PlayBooks
    category: LookCategories
    look: String
}

type StatsOption {
    id: ID
    playbookType: PlayBooks
    COOL: Int
    HARD: Int
    HOT: Int
    SHARP: Int
    WEIRD: Int
}

type GearInstructions {
    id: ID!
    youGet: String
    youGetItems: [String]
    inAddition: String
    introduceChoice: String
    numberCanChoose: Int
    chooseableGear: [String]
    withMC: String
    startingBarter: Int
}

type PlaybookCreator {
    id: ID!
    playbookType: PlayBooks
    playbook: Playbook
    gearInstructions: GearInstructions
    improvementInstructions: String
    movesInstructions: String
    hxInstructions: String
    names: [Name]
    looks: [Look]
    statsOptions: [StatsOption]
    playbookUniqueCreator: PlaybookUniqueCreator
}

type PlaybookUniqueCreator {
    id: ID!
    type: UniqueType!
    angelKitCreator: AngelKitCreator
    customWeaponsCreator: CustomWeaponsCreator
    brainerGearCreator: BrainerGearCreator
}

type AngelKitCreator {
    id: ID!
    angelKitInstructions: String!
    startingStock: Int!
}

type CustomWeaponsCreator {
    id: ID!
    firearmsTitle: String!
    firearmsBaseInstructions: String!
    firearmsBaseOptions: [TaggedItem]
    firearmsOptionsInstructions: String!
    firearmsOptionsOptions: [ItemCharacteristic]
    handTitle: String!
    handBaseInstructions: String!
    handBaseOptions: [TaggedItem]
    handOptionsInstructions: String!
    handOptionsOptions: [ItemCharacteristic]
}

type BrainerGearCreator {
    id: ID!
    gear: [String]!
}


type TaggedItem {
    id: ID!
    description: String!
    tags: [String]
}

type ItemCharacteristic {
    id: ID!
    description: String!
    tag: String
}

type PlaybookUnique {
    id: ID!
    type: UniqueType
    brainerGear: BrainerGear
}

type BrainerGear {
    id:ID!
    brainerGear: [String]
}

type Query {
    gameRolesByUserId(id: String!): [GameRole]
    game(gameId:String!): Game
    gameForPlayer(gameId:String!, userId:String!): Game
    gamesForInvitee(email: String!): [Game]
    allMoves: [Move]
    playbooks: [Playbook]
    playbookCreator(playbookType: PlayBooks!): PlaybookCreator
}

type Mutation {
    createGame(userId: String!,
        displayName: String!,
        email: String!
        name: String!): Game
    addInvitee(gameId: String!, email: String!): Game
    removeInvitee(gameId: String!, email: String!): Game
    addCommsApp(gameId: String!, app: String!): Game
    addCommsUrl(gameId: String!, url: String!): Game
    deleteGame(gameId: String!): Game
    addUserToGame(gameId: String!,
        userId: String!,
        displayName: String!,
        email: String!): Game
    createCharacter(gameRoleId: String!): Character
    setCharacterPlaybook(gameRoleId: String!,
        characterId: String!,
        playbookType: PlayBooks!): Character
    setCharacterName(gameRoleId: String!,
        characterId: String!,
        name: String!): Character
    setCharacterLook(gameRoleId: String!,
        characterId: String!,
        look: String!,
        category: LookCategories! ): Character
    setCharacterStats(gameRoleId: String!,
        characterId: String!,
        statsOptionId: String! ): Character
    setCharacterGear(gameRoleId: String!,
        characterId: String!,
        gear: [String]! ): Character
    setBrainerGear(gameRoleId: String!,
        characterId: String!,
        brainerGear: [String]! ): Character
}